//------------------------------------------------------------------------------
// <auto-generated>
//     This code was auto-generated by com.unity.inputsystem:InputActionCodeGenerator
//     version 1.7.0
//     from Assets/Input/InputActions.inputactions
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

using System;
using System.Collections;
using System.Collections.Generic;
using UnityEngine.InputSystem;
using UnityEngine.InputSystem.Utilities;

public partial class @InputActions: IInputActionCollection2, IDisposable
{
    public InputActionAsset asset { get; }
    public @InputActions()
    {
        asset = InputActionAsset.FromJson(@"{
    ""name"": ""InputActions"",
    ""maps"": [
        {
            ""name"": ""InputActionMap"",
            ""id"": ""f0926a05-2a9d-4be2-9188-971f1d5f85a1"",
            ""actions"": [
                {
                    ""name"": ""PlayerDirection"",
                    ""type"": ""Value"",
                    ""id"": ""2f676069-c660-476b-ba9a-41ea46bd6e3e"",
                    ""expectedControlType"": ""Vector2"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": true
                }
            ],
            ""bindings"": [
                {
                    ""name"": ""WASD"",
                    ""id"": ""701e00ce-940e-4d94-9f3f-8099c487db35"",
                    ""path"": ""2DVector"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""PlayerDirection"",
                    ""isComposite"": true,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": ""up"",
                    ""id"": ""619d2156-7c34-4eed-b6af-82d8233a86b8"",
                    ""path"": ""<Keyboard>/w"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""PlayerDirection"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": true
                },
                {
                    ""name"": ""down"",
                    ""id"": ""d42945c5-fece-4392-99f4-7e8eb42e0781"",
                    ""path"": ""<Keyboard>/s"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""PlayerDirection"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": true
                },
                {
                    ""name"": ""left"",
                    ""id"": ""a4114074-4c85-4f55-8a83-f17c4ddd130f"",
                    ""path"": ""<Keyboard>/a"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""PlayerDirection"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": true
                },
                {
                    ""name"": ""right"",
                    ""id"": ""4880e96c-313f-4c31-846e-64f0820d2b0c"",
                    ""path"": ""<Keyboard>/d"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""PlayerDirection"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": true
                }
            ]
        }
    ],
    ""controlSchemes"": []
}");
        // InputActionMap
        m_InputActionMap = asset.FindActionMap("InputActionMap", throwIfNotFound: true);
        m_InputActionMap_PlayerDirection = m_InputActionMap.FindAction("PlayerDirection", throwIfNotFound: true);
    }

    public void Dispose()
    {
        UnityEngine.Object.Destroy(asset);
    }

    public InputBinding? bindingMask
    {
        get => asset.bindingMask;
        set => asset.bindingMask = value;
    }

    public ReadOnlyArray<InputDevice>? devices
    {
        get => asset.devices;
        set => asset.devices = value;
    }

    public ReadOnlyArray<InputControlScheme> controlSchemes => asset.controlSchemes;

    public bool Contains(InputAction action)
    {
        return asset.Contains(action);
    }

    public IEnumerator<InputAction> GetEnumerator()
    {
        return asset.GetEnumerator();
    }

    IEnumerator IEnumerable.GetEnumerator()
    {
        return GetEnumerator();
    }

    public void Enable()
    {
        asset.Enable();
    }

    public void Disable()
    {
        asset.Disable();
    }

    public IEnumerable<InputBinding> bindings => asset.bindings;

    public InputAction FindAction(string actionNameOrId, bool throwIfNotFound = false)
    {
        return asset.FindAction(actionNameOrId, throwIfNotFound);
    }

    public int FindBinding(InputBinding bindingMask, out InputAction action)
    {
        return asset.FindBinding(bindingMask, out action);
    }

    // InputActionMap
    private readonly InputActionMap m_InputActionMap;
    private List<IInputActionMapActions> m_InputActionMapActionsCallbackInterfaces = new List<IInputActionMapActions>();
    private readonly InputAction m_InputActionMap_PlayerDirection;
    public struct InputActionMapActions
    {
        private @InputActions m_Wrapper;
        public InputActionMapActions(@InputActions wrapper) { m_Wrapper = wrapper; }
        public InputAction @PlayerDirection => m_Wrapper.m_InputActionMap_PlayerDirection;
        public InputActionMap Get() { return m_Wrapper.m_InputActionMap; }
        public void Enable() { Get().Enable(); }
        public void Disable() { Get().Disable(); }
        public bool enabled => Get().enabled;
        public static implicit operator InputActionMap(InputActionMapActions set) { return set.Get(); }
        public void AddCallbacks(IInputActionMapActions instance)
        {
            if (instance == null || m_Wrapper.m_InputActionMapActionsCallbackInterfaces.Contains(instance)) return;
            m_Wrapper.m_InputActionMapActionsCallbackInterfaces.Add(instance);
            @PlayerDirection.started += instance.OnPlayerDirection;
            @PlayerDirection.performed += instance.OnPlayerDirection;
            @PlayerDirection.canceled += instance.OnPlayerDirection;
        }

        private void UnregisterCallbacks(IInputActionMapActions instance)
        {
            @PlayerDirection.started -= instance.OnPlayerDirection;
            @PlayerDirection.performed -= instance.OnPlayerDirection;
            @PlayerDirection.canceled -= instance.OnPlayerDirection;
        }

        public void RemoveCallbacks(IInputActionMapActions instance)
        {
            if (m_Wrapper.m_InputActionMapActionsCallbackInterfaces.Remove(instance))
                UnregisterCallbacks(instance);
        }

        public void SetCallbacks(IInputActionMapActions instance)
        {
            foreach (var item in m_Wrapper.m_InputActionMapActionsCallbackInterfaces)
                UnregisterCallbacks(item);
            m_Wrapper.m_InputActionMapActionsCallbackInterfaces.Clear();
            AddCallbacks(instance);
        }
    }
    public InputActionMapActions @InputActionMap => new InputActionMapActions(this);
    public interface IInputActionMapActions
    {
        void OnPlayerDirection(InputAction.CallbackContext context);
    }
}
